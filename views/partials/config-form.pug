//- markup

.form-control.flex-auto
	form(id="golem-config-form" action="/s/run/" method="POST")
		.form-group
			label(for="cpuSelect")
				svg.bi(width='16' height='16' fill='currentColor')
					use(xlink:href='/icons.svg#cpu')
				|CPUs
			select(name="cpuSelect" id="cpuSelect")
				option(value="1") 1
				option(selected="selected" value="2") 2
				option(value="4") 4
		.form-group
			label(for="ramSelect")
				svg.bi(width='16' height='16' fill='currentColor')
					use(xlink:href='/icons.svg#aspect-ratio')
				|RAM
			select(name="ramSelect" id="ramSelect")
				option(value="1") 1 GB
				option(selected="selected" value="2") 2 GB
				option(value="4") 4 GB
		.form-group
			label(for="discSelect")
				svg.bi(width='16' height='16' fill='currentColor')
					use(xlink:href='/icons.svg#hdd')
				|Disk
			select(name="discSelect" id="discSelect")
				option(selected="selected" value="4") 4 GB
				option(value="8") 8 GB
				option(value="16") 16 GB
		.form-group
			label(for="imageSelect")
				svg.bi(width='16' height='16' fill='currentColor')
					use(xlink:href='/icons.svg#disc')
				|Image
			input#imageSelect.datalist(type="text" list='images' name='imageSelect' placeholder="Enter Image Hash" autocomplete="off" pattern="[A-Za-z0-9]+" )
			datalist#images
				option(value='cderycvgbhkun')
					|cderycvgbhkun
				option(value='xceryctibvuoi')
					|xceryctibvuoi
				option(value='xderycvtyubur')
					|xderycvtyubur
				option(value='crtuvbyuionmo')
					|crtuvbyuionmo
				option(value='crftuvyuichsi')
					|crftuvyuichsi
				option(value='crtcfyhuinuio')
					|crtcfyhuinuio

		.form-group.no-border
			button(type="submit" value="Run" id="submit" class="btn")
				svg.bi(width='16' height='16' fill='currentColor')
					use(xlink:href='/icons.svg#play-fill')
				|Run

//- JS

script.
	(function(w,d){

		//- VALIDATION MESSAGE

		let img = d.querySelector("input#imageSelect");
		img.oninvalid = function(e) {
			this.setCustomValidity("");
			if (!this.validity.valid) {
				this.setCustomValidity("The image hash you entered is invalid.");
			}
		};
		img.oninput = function(e) {
			this.setCustomValidity("");
		};


		// RUN FUNCTIONALITY TO OUTPUT TO TERMINAL

		const configForm = d.getElementById("golem-config-form");
		configForm.addEventListener('submit', event => {

			// Prevent the default form submit
			event.preventDefault();

			// Store reference to form to make later code easier to read
			const form = event.target;	
			
			// Post data using the Fetch API, wait for the promise object before we send it to the terminal
			fetch(form.action, {
				method: form.method,
				body: new URLSearchParams(new FormData(form))
			}).then(res => {
				const reader = res.body.getReader();
				reader.read().then(function processText({ done, value }) {
					let receivedText = new TextDecoder().decode(value)
					slates.output.replaceRange(receivedText, CodeMirror.Pos(slates.output.lastLine()));

					slates.output.scrollTo(0, slates.output.getScrollInfo().height);
										
					if (done) {
						console.log("Stream complete");
						return;
					}
					return reader.read().then(processText);
				});
			}).catch(err => {
				console.log('Error outputting stream: ' + err);
			});
		});
	})(window,document);